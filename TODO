TODO:

Add stack structure
comments inside comments
EOL token
Fix range operator from .. to ...

READY:

fix nillable



ASK:

all multiline strings start from new line


%token id type underscore expr
%% /* LL(1) */
CODE : VAR_DECL CODE
| LET_DECL CODE
| FUNC_DECL CODE
| WHILE_LOOP CODE
| FOR_LOOP CODE
| BRANCH CODE
| ID_CALL_OR_ASSIGN CODE
| RETURN
| 'break'
| 'continue'
| /*eps*/ ;

RETURN : 'return' RET_EXPR NL;

RET_EXPR : expr
| /*eps*/ ;

VAR_DECL : 'var' SOFT_NL id SOFT_NL VAR_LET_TYPE SOFT_NL VAR_LET_EXPR NL;

VAR_LET_TYPE : ':' SOFT_NL type
| /*eps*/ ;

VAR_LET_EXPR : '=' SOFT_NL expr
| /*eps*/ ;

LET_DECL : 'let' SOFT_NL id SOFT_NL VAR_LET_TYPE SOFT_NL VAR_LET_EXPR NL;

FUNC_DECL : 'func' SOFT_NL id SOFT_NL '(' SOFT_NL PARAM_LIST SOFT_NL ')' SOFT_NL FUNC_RET_TYPE SOFT_NL '{' SOFT_NL CODE SOFT_NL '}' NL;

FUNC_RET_TYPE : '->' SOFT_NL type
| /*eps*/ ;

PARAM_LIST : PARAM SOFT_NL NEXT_PARAM
| /*eps*/ ;

PARAM : PARAM_NAME SOFT_NL id SOFT_NL ':' SOFT_NL type ;
PARAM_NAME : id
| underscore ;
NEXT_PARAM : ',' SOFT_NL PARAM SOFT_NL NEXT_PARAM
| /*eps*/ ;


BRANCH : 'if' SOFT_NL BR_EXPR SOFT_NL '{' SOFT_NL CODE SOFT_NL '}' SOFT_NL ELSE NL;
BR_EXPR : expr
| 'let' SOFT_NL id ;
ELSE : 'else' SOFT_NL ELSE_IF
| /*eps*/ ;
ELSE_IF : 'if' SOFT_NL BR_EXPR SOFT_NL '{' SOFT_NL CODE SOFT_NL '}' SOFT_NL ELSE_IF
| '{' SOFT_NL CODE SOFT_NL '}' ;

WHILE_LOOP : 'while' SOFT_NL expr SOFT_NL '{' SOFT_NL CODE SOFT_NL'}' NL;

FOR_LOOP : 'for' SOFT_NL FOR_ID SOFT_NL 'in' SOFT_NL expr SOFT_NL RANGE SOFT_NL '{' SOFT_NL CODE SOFT_NL '}' NL;
FOR_ID : id
| underscore ;
RANGE : '..' SOFT_NL expr
| '..<' SOFT_NL expr ;

CALL_PARAM_LIST : CALL_PARAM SOFT_NL NEXT_CALL_PARAM
| /*eps*/ ;

CALL_PARAM : NAMED_CALL_PARAM
| POS_CALL_PARAM ;

NAMED_CALL_PARAM : CALL_PARAM_NAME SOFT_NL ':' SOFT_NL expr ;
CALL_PARAM_NAME : id ;

POS_CALL_PARAM : expr ;

NEXT_CALL_PARAM : ',' SOFT_NL CALL_PARAM SOFT_NL NEXT_CALL_PARAM
| /*eps*/ ;

ID_CALL_OR_ASSIGN : id NEXT_ID_CALL_OR_ASSIGN ;
NEXT_ID_CALL_OR_ASSIGN: '(' SOFT_NL CALL_PARAM_LIST SOFT_NL ')'
| '=' expr ;

SOFT_NL : '\n'
| /*eps*/ ;

NL : '\n' ;
