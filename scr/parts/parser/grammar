S ::= CODE $
S ::= $

CODE ::= VAR_DECL CODE
CODE ::= LET_DECL CODE
CODE ::= FUNC_DECL CODE
CODE ::= WHILE_LOOP CODE
CODE ::= FOR_LOOP CODE
CODE ::= BRANCH CODE
CODE ::= ID_CALL_OR_ASSING CODE
CODE ::= RETURN
CODE ::= break
CODE ::= continue
CODE ::= ''

RETURN ::= return RET_EXPR NL

RET_EXPR ::= expr
RET_EXPR ::= ''

VAR_DECL ::= var id VAR_LET_TYPE VAR_LET_EXP NL

VAR_LET_TYPE ::= : TYPE
VAR_LET_TYPE ::= ''

VAR_LET_EXP ::= = expr
VAR_LET_EXP ::= ''

LET_DECL ::= let id VAR_LET_TYPE VAR_LET_EXP NL

FUNC_DECL ::= func id ( PARAM_LIST ) FUNC_RET_TYPE { CODE } NL

FUNC_RET_TYPE ::= -> TYPE
FUNC_RET_TYPE ::= ''

PARAM_LIST ::= PARAM NEXT_PARAM
PARAM_LIST ::= ''

PARAM ::= PARAM_NAME id : TYPE
PARAM_NAME ::= id
PARAM_NAME ::= underscore
NEXT_PARAM ::= , PARAM NEXT_PARAM
NEXT_PARAM ::= ''


BRANCH ::= if BR_EXPR { CODE } ELSE NL
BR_EXPR ::= expr
BR_EXPR ::= let id
ELSE ::= else ELSE_IF
ELSE ::= ''
ELSE_IF ::= if BR_EXPR { CODE } ELSE_IF
ELSE_IF ::= { CODE }

WHILE_LOOP ::= while expr { CODE } NL

FOR_LOOP ::= for FOR_ID in expr RANGE { CODE } NL
FOR_ID ::= id
FOR_ID ::= underscore
RANGE ::= ... expr
RANGE ::= ..< expr

CALL_PARAM_LIST ::= CALL_PARAM NEXT_CALL_PARAM
CALL_PARAM_LIST ::= ''

CALL_PARAM ::= NAMED_CALL_PARAM
CALL_PARAM ::= POS_CALL_PARAM

NAMED_CALL_PARAM ::= CALL_PARAM_NAME : expr
CALL_PARAM_NAME ::= id
CALL_PARAM_NAME ::= underscore

POS_CALL_PARAM ::= expr

NEXT_CALL_PARAM ::= , CALL_PARAM NEXT_CALL_PARAM
NEXT_CALL_PARAM ::= ''

ID_CALL_OR_ASSING ::= id NEXT_ID_CALL_OR_ASSING NL
NEXT_ID_CALL_OR_ASSING ::= ( CALL_PARAM_LIST )
NEXT_ID_CALL_OR_ASSING ::= = expr

SOFT_NL ::= \n SOFT_NL
SOFT_NL ::= ''

NL ::= \n SOFT_NL

TYPE ::= String
TYPE ::= Int
TYPE ::= Bool
TYPE ::= Double